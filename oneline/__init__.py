globals().update({"setup": lambda bot: (asyncio := __import__("asyncio"), redbot := __import__("redbot"), typing := __import__("typing"), bot.add_cog(type("OneLine", (redbot.core.commands.Cog,), {"__init__": (lambda self, bot: (setattr(self, "bot", bot), setattr(self, "config", redbot.core.Config.get_conf(self, 544974305445019651, True)), self.config.register_global(test=1), None)[-1]), "gettest": (redbot.core.commands.command(name="gettest", help="Get the value of test in the config")((y := asyncio.coroutine(lambda self, ctx: (val := (yield from (self.config.test().__await__())), (yield from ctx.send(f"{val = }")))), setattr(y, "__annotations__", {"self": typing.Any, "ctx": redbot.core.commands.Context}))[0])), "settest": (redbot.core.commands.command(name="settest", help="Set the value of test in the config")(((y := asyncio.coroutine(lambda self, ctx, new_val: ((yield from self.config.test.set(new_val)), (yield from ctx.tick())))), setattr(y, "__annotations__", {"self": typing.Any, "ctx": redbot.core.commands.Context, "new_val": int}))[0])), "testgroup": (testgroup := redbot.core.commands.group(name="testgroup", help_override="A oneline group command")(((y := asyncio.coroutine(lambda self, ctx: ...)), setattr(y, "__annotations__", {"self": typing.Any, "ctx": redbot.core.commands.Context}))[0])), "testcom": testgroup.command(name="testcom", help="A oneline sub command")(((y := asyncio.coroutine(lambda self, ctx, *, y: (yield from ctx.send(f"`{y = }`")))), setattr(y, "__annotations__", {"self": typing.Any, "ctx": redbot.core.commands.Context, "y": str}))[0])})(bot))), "teardown": lambda x: x.remove_cog("OneLine")})